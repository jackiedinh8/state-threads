!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABIFLAG	Makefile	/^ABIFLAG     = -64$/;"	m
ABIFLAG	Makefile	/^ABIFLAG     = -n32$/;"	m
ACCESS_FILE	examples/server.c	56;"	d	file:
ACCLOG_FLUSH_INTERVAL	examples/server.c	74;"	d	file:
AIX_VERSION	Makefile	/^AIX_VERSION = $(shell uname -v).$(shell uname -r)$/;"	m
AR	Makefile	/^AR          = ar$/;"	m
AR	extensions/Makefile	/^AR          = ar$/;"	m
ARFLAGS	Makefile	/^ARFLAGS     = -rv$/;"	m
ARFLAGS	extensions/Makefile	/^ARFLAGS     = rv$/;"	m
BUILD	Makefile	/^BUILD       = DBG$/;"	m
BUILD	examples/Makefile	/^BUILD       =$/;"	m
BUILD	extensions/Makefile	/^BUILD       =$/;"	m
BUSY_THREADS	examples/server.c	134;"	d	file:
CC	Makefile	/^CC          = cc$/;"	m
CC	Makefile	/^CC          = gcc$/;"	m
CC	Makefile	/^CC          = xlC$/;"	m
CC	examples/Makefile	/^CC          = cc$/;"	m
CC	extensions/Makefile	/^CC          = cc$/;"	m
CFLAGS	Makefile	/^CFLAGS      = $(ABIFLAG) -mips3$/;"	m
CFLAGS	Makefile	/^CFLAGS      = -Ae +DAportable +Z$/;"	m
CFLAGS	Makefile	/^CFLAGS      = -Ae +DD64 +Z$/;"	m
CFLAGS	Makefile	/^CFLAGS      =$/;"	m
CFLAGS	examples/Makefile	/^CFLAGS      =$/;"	m
CFLAGS	extensions/Makefile	/^CFLAGS      =$/;"	m
CLOSE_AND_RETURN	examples/res.c	200;"	d	file:
CLOSE_AND_RETURN	extensions/dnsres.c	203;"	d	file:
DEFINES	Makefile	/^DEFINES     = -D$(OS)$/;"	m
DEFINES	Makefile	/^DEFINES     = -DHPUX$/;"	m
DEFINES	Makefile	/^DEFINES     = -DIRIX$/;"	m
DEFINES	Makefile	/^DEFINES     = -DLINUX$/;"	m
DEFINES	Makefile	/^DEFINES     = -DSOLARIS$/;"	m
DEFINES	examples/Makefile	/^DEFINES     =$/;"	m
DEFINES	extensions/Makefile	/^DEFINES     =$/;"	m
DEF_FILE	Makefile	/^DEF_FILE    = $(TARGETDIR)\/libst.def$/;"	m
DEPTH	examples/Makefile	/^DEPTH       = ..$/;"	m
DEPTH	extensions/Makefile	/^DEPTH       = ..$/;"	m
DESC	Makefile	/^DESC        = st.pc$/;"	m
DLIBRARY	Makefile	/^DLIBRARY    = $(TARGETDIR)\/$(SONAME)$/;"	m
DLIBRARY	Makefile	/^DLIBRARY    = $(TARGETDIR)\/libst.$(DSO_SUFFIX).$(VERSION)$/;"	m
DLIBRARY	Makefile	/^DLIBRARY    = $(TARGETDIR)\/libst.dll$/;"	m
DSO_SUFFIX	Makefile	/^DSO_SUFFIX  = dll$/;"	m
DSO_SUFFIX	Makefile	/^DSO_SUFFIX  = dylib$/;"	m
DSO_SUFFIX	Makefile	/^DSO_SUFFIX  = sl$/;"	m
DSO_SUFFIX	Makefile	/^DSO_SUFFIX  = so$/;"	m
ECHO	Makefile	/^ECHO        = \/bin\/echo$/;"	m
ECHO	examples/Makefile	/^ECHO        = \/bin\/echo$/;"	m
ECHO	extensions/Makefile	/^ECHO        = \/bin\/echo$/;"	m
ERRORS_FILE	examples/server.c	55;"	d	file:
ETIME	md.h	46;"	d
ETIME	public.h	76;"	d
EXAMPLES	Makefile	/^EXAMPLES    = examples$/;"	m
EXAMPLES	Makefile	/^EXAMPLES    =$/;"	m
EXAMPLES	examples/Makefile	/^EXAMPLES    = $(OBJDIR)\/lookupdns $(OBJDIR)\/proxy $(OBJDIR)\/server$/;"	m
EXAMPLES	examples/Makefile	/^EXAMPLES    = unknown$/;"	m
EXTRALIBS	examples/Makefile	/^EXTRALIBS   = -lsocket -lnsl$/;"	m
EXTRALIBS	examples/Makefile	/^EXTRALIBS   =$/;"	m
EXTRALIBS	extensions/Makefile	/^EXTRALIBS   = -lsocket -lnsl$/;"	m
EXTRALIBS	extensions/Makefile	/^EXTRALIBS   =$/;"	m
EXTRA_OBJS	Makefile	/^EXTRA_OBJS  = $(TARGETDIR)\/ia64asm.o$/;"	m
FD_PER_THREAD	examples/server.c	71;"	d	file:
FILEREADER_MAX_READ	extensions/stx_fileio.c	50;"	d	file:
FULLNAME	Makefile	/^FULLNAME    = libst.$(DSO_SUFFIX).$(VERSION)$/;"	m
FULLNAME	Makefile	/^FULLNAME    = libst.$(VERSION).$(DSO_SUFFIX)$/;"	m
HEADER	Makefile	/^HEADER      = $(TARGETDIR)\/st.h$/;"	m
HEADER	examples/Makefile	/^HEADER      = $(INCDIR)\/st.h$/;"	m
IA	docs/st.html	/^<A NAME="IA">$/;"	a
INADDR_NONE	examples/proxy.c	48;"	d	file:
INADDR_NONE	examples/server.c	128;"	d	file:
INCDIR	examples/Makefile	/^INCDIR      = $(DEPTH)\/$(TARGETDIR)$/;"	m
INCDIR	extensions/Makefile	/^INCDIR      = $(DEPTH)\/$(TARGETDIR)$/;"	m
IOBUFSIZE	examples/proxy.c	45;"	d	file:
LD	Makefile	/^LD          = cc$/;"	m
LD	Makefile	/^LD          = gcc$/;"	m
LD	Makefile	/^LD          = ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS     = $(ABIFLAG) -shared$/;"	m
LDFLAGS	Makefile	/^LDFLAGS     = -G$/;"	m
LDFLAGS	Makefile	/^LDFLAGS     = -b$/;"	m
LDFLAGS	Makefile	/^LDFLAGS     = -dynamiclib -install_name \/sw\/lib\/libst.$(MAJOR).$(DSO_SUFFIX) -compatibility_version $(MAJOR) -current_version $(VERSION)$/;"	m
LDFLAGS	Makefile	/^LDFLAGS     = -shared -all -expect_unresolved "*"$/;"	m
LDFLAGS	Makefile	/^LDFLAGS     = -shared -soname=$(SONAME) -lc$/;"	m
LDFLAGS	Makefile	/^LDFLAGS     = libst.def -shared --enable-auto-image-base -Wl,--output-def,$(DEF_FILE),--out-implib,$(SLIBRARY)$/;"	m
LIBRARIES	Makefile	/^LIBRARIES   = $(SLIBRARY) $(DLIBRARY)$/;"	m
LIBRARIES	Makefile	/^LIBRARIES   = $(SLIBRARY)$/;"	m
LIBRESOLV	examples/Makefile	/^LIBRESOLV   = -lresolv$/;"	m
LIBRESOLV	examples/Makefile	/^LIBRESOLV   =$/;"	m
LIBRESOLV	extensions/Makefile	/^LIBRESOLV   = -lresolv$/;"	m
LIBRESOLV	extensions/Makefile	/^LIBRESOLV   =$/;"	m
LIBST	examples/Makefile	/^LIBST       = $(OBJDIR)\/libst.a$/;"	m
LINKNAME	Makefile	/^LINKNAME    = libst.$(DSO_SUFFIX)$/;"	m
LINKNAME	Makefile	/^LINKNAME    =$/;"	m
LISTENQ_SIZE_DEFAULT	examples/server.c	62;"	d	file:
LN	Makefile	/^LN          = ln$/;"	m
LNFLAGS	Makefile	/^LNFLAGS     = -s$/;"	m
MAJOR	Makefile	/^MAJOR       = $(shell echo $(VERSION) | sed 's\/^\\([^\\.]*\\).*\/\\1\/')$/;"	m
MAP_ANON	md.h	50;"	d
MAP_FAILED	md.h	54;"	d
MAXLINE	examples/error.c	45;"	d	file:
MAXPACKET	examples/res.c	74;"	d	file:
MAXPACKET	extensions/dnsres.c	64;"	d	file:
MAX_ADDRS	extensions/testdns.c	6;"	d	file:
MAX_BIND_ADDRS	examples/server.c	65;"	d	file:
MAX_HOST_ADDRS	extensions/dnscache.c	17;"	d	file:
MAX_WAIT_THREADS_DEFAULT	examples/server.c	68;"	d	file:
MD_ACCEPT_NB_INHERITED	md.h	119;"	d
MD_ACCEPT_NB_INHERITED	md.h	147;"	d
MD_ACCEPT_NB_INHERITED	md.h	177;"	d
MD_ACCEPT_NB_INHERITED	md.h	217;"	d
MD_ACCEPT_NB_INHERITED	md.h	434;"	d
MD_ACCEPT_NB_INHERITED	md.h	469;"	d
MD_ACCEPT_NB_INHERITED	md.h	65;"	d
MD_ACCEPT_NB_NOT_INHERITED	md.h	265;"	d
MD_ACCEPT_NB_NOT_INHERITED	md.h	503;"	d
MD_ACCEPT_NB_NOT_INHERITED	md.h	528;"	d
MD_ACCEPT_NB_NOT_INHERITED	md.h	93;"	d
MD_ALWAYS_UNSERIALIZED_ACCEPT	md.h	120;"	d
MD_ALWAYS_UNSERIALIZED_ACCEPT	md.h	148;"	d
MD_ALWAYS_UNSERIALIZED_ACCEPT	md.h	178;"	d
MD_ALWAYS_UNSERIALIZED_ACCEPT	md.h	218;"	d
MD_ALWAYS_UNSERIALIZED_ACCEPT	md.h	266;"	d
MD_ALWAYS_UNSERIALIZED_ACCEPT	md.h	435;"	d
MD_ALWAYS_UNSERIALIZED_ACCEPT	md.h	470;"	d
MD_ALWAYS_UNSERIALIZED_ACCEPT	md.h	504;"	d
MD_ALWAYS_UNSERIALIZED_ACCEPT	md.h	66;"	d
MD_ALWAYS_UNSERIALIZED_ACCEPT	md.h	94;"	d
MD_CAP_STACK	md.h	254;"	d
MD_CAP_STACK	md.h	570;"	d
MD_GET_SP	md.h	101;"	d
MD_GET_SP	md.h	342;"	d
MD_GET_SP	md.h	346;"	d
MD_GET_SP	md.h	353;"	d
MD_GET_SP	md.h	357;"	d
MD_GET_SP	md.h	364;"	d
MD_GET_SP	md.h	370;"	d
MD_GET_SP	md.h	374;"	d
MD_GET_SP	md.h	381;"	d
MD_GET_SP	md.h	385;"	d
MD_GET_SP	md.h	390;"	d
MD_GET_SP	md.h	396;"	d
MD_GET_SP	md.h	406;"	d
MD_GET_SP	md.h	415;"	d
MD_GET_UTIME	md.h	110;"	d
MD_GET_UTIME	md.h	138;"	d
MD_GET_UTIME	md.h	168;"	d
MD_GET_UTIME	md.h	206;"	d
MD_GET_UTIME	md.h	230;"	d
MD_GET_UTIME	md.h	272;"	d
MD_GET_UTIME	md.h	460;"	d
MD_GET_UTIME	md.h	492;"	d
MD_GET_UTIME	md.h	516;"	d
MD_GET_UTIME	md.h	554;"	d
MD_GET_UTIME	md.h	83;"	d
MD_HAVE_SOCKLEN_T	md.h	436;"	d
MD_HAVE_SOCKLEN_T	md.h	69;"	d
MD_INIT_CONTEXT	md.h	103;"	d
MD_INIT_CONTEXT	md.h	131;"	d
MD_INIT_CONTEXT	md.h	161;"	d
MD_INIT_CONTEXT	md.h	185;"	d
MD_INIT_CONTEXT	md.h	195;"	d
MD_INIT_CONTEXT	md.h	223;"	d
MD_INIT_CONTEXT	md.h	296;"	d
MD_INIT_CONTEXT	md.h	313;"	d
MD_INIT_CONTEXT	md.h	421;"	d
MD_INIT_CONTEXT	md.h	453;"	d
MD_INIT_CONTEXT	md.h	485;"	d
MD_INIT_CONTEXT	md.h	509;"	d
MD_INIT_CONTEXT	md.h	537;"	d
MD_INIT_CONTEXT	md.h	544;"	d
MD_INIT_CONTEXT	md.h	76;"	d
MD_JB_SP	md.h	126;"	d
MD_JB_SP	md.h	154;"	d
MD_JB_SP	md.h	156;"	d
MD_JB_SP	md.h	442;"	d
MD_JB_SP	md.h	444;"	d
MD_JB_SP	md.h	446;"	d
MD_JB_SP	md.h	448;"	d
MD_JB_SP	md.h	476;"	d
MD_JB_SP	md.h	478;"	d
MD_JB_SP	md.h	480;"	d
MD_JB_SP	md.h	99;"	d
MD_LONGJMP	md.h	123;"	d
MD_LONGJMP	md.h	151;"	d
MD_LONGJMP	md.h	181;"	d
MD_LONGJMP	md.h	221;"	d
MD_LONGJMP	md.h	289;"	d
MD_LONGJMP	md.h	311;"	d
MD_LONGJMP	md.h	331;"	d
MD_LONGJMP	md.h	439;"	d
MD_LONGJMP	md.h	473;"	d
MD_LONGJMP	md.h	507;"	d
MD_LONGJMP	md.h	531;"	d
MD_LONGJMP	md.h	74;"	d
MD_LONGJMP	md.h	97;"	d
MD_SETJMP	md.h	122;"	d
MD_SETJMP	md.h	150;"	d
MD_SETJMP	md.h	180;"	d
MD_SETJMP	md.h	220;"	d
MD_SETJMP	md.h	288;"	d
MD_SETJMP	md.h	310;"	d
MD_SETJMP	md.h	330;"	d
MD_SETJMP	md.h	438;"	d
MD_SETJMP	md.h	472;"	d
MD_SETJMP	md.h	506;"	d
MD_SETJMP	md.h	530;"	d
MD_SETJMP	md.h	73;"	d
MD_SETJMP	md.h	96;"	d
MD_STACK_GROWS_DOWN	md.h	117;"	d
MD_STACK_GROWS_DOWN	md.h	145;"	d
MD_STACK_GROWS_DOWN	md.h	215;"	d
MD_STACK_GROWS_DOWN	md.h	278;"	d
MD_STACK_GROWS_DOWN	md.h	308;"	d
MD_STACK_GROWS_DOWN	md.h	339;"	d
MD_STACK_GROWS_DOWN	md.h	350;"	d
MD_STACK_GROWS_DOWN	md.h	361;"	d
MD_STACK_GROWS_DOWN	md.h	367;"	d
MD_STACK_GROWS_DOWN	md.h	378;"	d
MD_STACK_GROWS_DOWN	md.h	389;"	d
MD_STACK_GROWS_DOWN	md.h	393;"	d
MD_STACK_GROWS_DOWN	md.h	402;"	d
MD_STACK_GROWS_DOWN	md.h	432;"	d
MD_STACK_GROWS_DOWN	md.h	467;"	d
MD_STACK_GROWS_DOWN	md.h	501;"	d
MD_STACK_GROWS_DOWN	md.h	526;"	d
MD_STACK_GROWS_DOWN	md.h	63;"	d
MD_STACK_GROWS_DOWN	md.h	91;"	d
MD_STACK_GROWS_UP	md.h	175;"	d
MD_STACK_GROWS_UP	md.h	409;"	d
MD_STACK_PAD_SIZE	md.h	193;"	d
MD_STACK_PAD_SIZE	md.h	294;"	d
MD_STACK_PAD_SIZE	md.h	535;"	d
MD_STACK_PAD_SIZE	md.h	562;"	d
MD_USE_BSD_ANON_MMAP	md.h	118;"	d
MD_USE_BSD_ANON_MMAP	md.h	146;"	d
MD_USE_BSD_ANON_MMAP	md.h	176;"	d
MD_USE_BSD_ANON_MMAP	md.h	264;"	d
MD_USE_BSD_ANON_MMAP	md.h	433;"	d
MD_USE_BSD_ANON_MMAP	md.h	468;"	d
MD_USE_BSD_ANON_MMAP	md.h	92;"	d
MD_USE_SYSV_ANON_MMAP	md.h	216;"	d
MD_USE_SYSV_ANON_MMAP	md.h	502;"	d
MD_USE_SYSV_ANON_MMAP	md.h	527;"	d
MD_USE_SYSV_ANON_MMAP	md.h	64;"	d
NDEBUG	common.h	53;"	d
NETDB_INTERNAL	examples/lookupdns.c	43;"	d	file:
NETDB_INTERNAL	examples/res.c	77;"	d	file:
NETDB_INTERNAL	extensions/dnsres.c	67;"	d	file:
OBJDIR	examples/Makefile	/^OBJDIR      = $(DEPTH)\/$(TARGETDIR)$/;"	m
OBJDIR	extensions/Makefile	/^OBJDIR      = $(DEPTH)\/$(TARGETDIR)$/;"	m
OBJS	Makefile	/^OBJS        = $(TARGETDIR)\/sched.o \\$/;"	m
OBJS	extensions/Makefile	/^OBJS        = $(OBJDIR)\/dnscache.o $(OBJDIR)\/dnsres.o $(OBJDIR)\/lrucache.o$/;"	m
OTHER_FLAGS	Makefile	/^OTHER_FLAGS = -Wall$/;"	m
OTHER_FLAGS	Makefile	/^OTHER_FLAGS = -fullwarn$/;"	m
OTHER_FLAGS	Makefile	/^OTHER_FLAGS = -w$/;"	m
OTHER_FLAGS	examples/Makefile	/^OTHER_FLAGS =$/;"	m
OTHER_FLAGS	extensions/Makefile	/^OTHER_FLAGS =$/;"	m
PID_FILE	examples/server.c	54;"	d	file:
POLLERR	public.h	65;"	d
POLLHUP	public.h	66;"	d
POLLIN	public.h	55;"	d
POLLNORM	public.h	63;"	d
POLLNVAL	public.h	67;"	d
POLLOUT	public.h	57;"	d
POLLPRI	public.h	56;"	d
POLLRDBAND	public.h	60;"	d
POLLRDNORM	public.h	58;"	d
POLLREMOVE	public.h	69;"	d
POLLWRBAND	public.h	61;"	d
POLLWRNORM	public.h	59;"	d
RANLIB	Makefile	/^RANLIB      = ranlib$/;"	m
RANLIB	Makefile	/^RANLIB      = true$/;"	m
RANLIB	extensions/Makefile	/^RANLIB      = ranlib$/;"	m
REDZONE	stk.c	51;"	d	file:
REQUEST_TIMEOUT	examples/server.c	77;"	d	file:
RQST_COUNT	examples/server.c	136;"	d	file:
SEC2USEC	examples/server.c	131;"	d	file:
SERV_PORT_DEFAULT	examples/server.c	59;"	d	file:
SFLAGS	Makefile	/^SFLAGS      = -fPIC -fno-common$/;"	m
SFLAGS	Makefile	/^SFLAGS      = -fPIC$/;"	m
SFLAGS	Makefile	/^SFLAGS      =$/;"	m
SHELL	Makefile	/^SHELL       = \/bin\/sh$/;"	m
SHELL	examples/Makefile	/^SHELL       = \/bin\/sh$/;"	m
SHELL	extensions/Makefile	/^SHELL       = \/bin\/sh$/;"	m
SLIBRARY	Makefile	/^SLIBRARY    = $(TARGETDIR)\/libst.a$/;"	m
SLIBRARY	Makefile	/^SLIBRARY    = $(TARGETDIR)\/libst.dll.a$/;"	m
SLIBRARY	extensions/Makefile	/^SLIBRARY    = $(OBJDIR)\/libstx.a$/;"	m
SONAME	Makefile	/^SONAME      = cygst.$(DSO_SUFFIX)$/;"	m
SONAME	Makefile	/^SONAME      = libst.$(DSO_SUFFIX).$(MAJOR)$/;"	m
SONAME	Makefile	/^SONAME      = libst.$(MAJOR).$(DSO_SUFFIX)$/;"	m
STATIC_ONLY	Makefile	/^STATIC_ONLY = yes$/;"	m
STX_BEGIN_MACRO	extensions/common.h	8;"	d
STX_CACHE_ENTRY_PTR	extensions/lrucache.c	45;"	d	file:
STX_CLIST_APPEND_LINK	extensions/common.h	40;"	d
STX_CLIST_HEAD	extensions/common.h	50;"	d
STX_CLIST_INIT_CLIST	extensions/common.h	59;"	d
STX_CLIST_INSERT_AFTER	extensions/common.h	31;"	d
STX_CLIST_INSERT_BEFORE	extensions/common.h	22;"	d
STX_CLIST_IS_EMPTY	extensions/common.h	55;"	d
STX_CLIST_REMOVE_LINK	extensions/common.h	43;"	d
STX_CLIST_TAIL	extensions/common.h	51;"	d
STX_END_MACRO	extensions/common.h	9;"	d
STX_FILEIO_SIGNUM	extensions/stx_fileio.c	42;"	d	file:
STX_MIN	extensions/common.h	74;"	d
ST_ALL	Makefile	/^ST_ALL      = $(TARGETDIR) $(LIBRARIES) $(HEADER) $(EXAMPLES) $(DESC)$/;"	m
ST_ALL	Makefile	/^ST_ALL      = unknown$/;"	m
ST_APPEND_LINK	common.h	96;"	d
ST_ASSERT	common.h	56;"	d
ST_BEGIN_MACRO	common.h	58;"	d
ST_CLIST_IS_EMPTY	common.h	114;"	d
ST_DEBUG_ITERATE_THREADS	common.h	364;"	d
ST_DEBUG_ITERATE_THREADS	common.h	366;"	d
ST_DEFAULT_STACK_SIZE	common.h	350;"	d
ST_DEFAULT_STACK_SIZE	common.h	352;"	d
ST_END_MACRO	common.h	59;"	d
ST_INIT_CLIST	common.h	118;"	d
ST_INIT_STATIC_CLIST	common.h	124;"	d
ST_INSERT_AFTER	common.h	84;"	d
ST_INSERT_BEFORE	common.h	75;"	d
ST_INSERT_LINK	common.h	99;"	d
ST_KEYS_MAX	common.h	354;"	d
ST_LIST_HEAD	common.h	102;"	d
ST_LIST_TAIL	common.h	103;"	d
ST_MIN_POLLFDS_SIZE	common.h	355;"	d
ST_NEXT_LINK	common.h	93;"	d
ST_REMOVE_LINK	common.h	106;"	d
ST_UTIME_NO_TIMEOUT	common.h	348;"	d
Signal	examples/server.c	/^static void Signal(int sig, void (*handler)(int))$/;"	f	file:
TARGETDIR	Makefile	/^TARGETDIR   = $(OS)_$(AIX_VERSION)_$(BUILD)$/;"	m
TARGETDIR	Makefile	/^TARGETDIR   = $(OS)_$(BUILD)$/;"	m
TARGETDIR	Makefile	/^TARGETDIR   = $(OS)_$(shell uname -r | sed 's\/^5\/2\/')_$(BUILD)$/;"	m
TARGETDIR	Makefile	/^TARGETDIR   = $(OS)_$(shell uname -r)_$(BUILD)$/;"	m
TARGETDIR	examples/Makefile	/^TARGETDIR   =$/;"	m
TARGETDIR	extensions/Makefile	/^TARGETDIR   = obj$/;"	m
TARGETS	Makefile	/^TARGETS     = aix-debug aix-optimized               \\$/;"	m
TIMEOUT	examples/lookupdns.c	47;"	d	file:
TIMEOUT	extensions/testdns.c	7;"	d	file:
TOTAL_THREADS	examples/server.c	135;"	d	file:
VERSION	Makefile	/^VERSION     = 1.5.1$/;"	m
WAIT_THREADS	examples/server.c	133;"	d	file:
_IO_NOT_READY_ERROR	io.c	57;"	d	file:
_IO_NOT_READY_ERROR	io.c	59;"	d	file:
_LOCAL_MAXIOV	io.c	62;"	d	file:
_STX_COMMON_H_	extensions/common.h	2;"	d
_STX_H_	extensions/stx.h	2;"	d
_ST_ADD_IOQ	common.h	280;"	d
_ST_ADD_RUNQ	common.h	283;"	d
_ST_ADD_SLEEPQ	common.h	286;"	d
_ST_ADD_THREADQ	common.h	293;"	d
_ST_ADD_ZOMBIEQ	common.h	289;"	d
_ST_CURRENT_THREAD	common.h	244;"	d
_ST_DEL_IOQ	common.h	281;"	d
_ST_DEL_RUNQ	common.h	284;"	d
_ST_DEL_SLEEPQ	common.h	287;"	d
_ST_DEL_THREADQ	common.h	294;"	d
_ST_DEL_ZOMBIEQ	common.h	290;"	d
_ST_FD_EXCEPTION_CNT	common.h	268;"	d
_ST_FD_EXCEPTION_SET	common.h	265;"	d
_ST_FD_READ_CNT	common.h	266;"	d
_ST_FD_READ_SET	common.h	263;"	d
_ST_FD_WRITE_CNT	common.h	267;"	d
_ST_FD_WRITE_SET	common.h	264;"	d
_ST_FL_IDLE_THREAD	common.h	312;"	d
_ST_FL_INTERRUPT	common.h	314;"	d
_ST_FL_ON_SLEEPQ	common.h	313;"	d
_ST_FL_PRIMORDIAL	common.h	311;"	d
_ST_FL_TIMEDOUT	common.h	315;"	d
_ST_INIT_CONTEXT	common.h	395;"	d
_ST_IOQ	common.h	250;"	d
_ST_LAST_CLOCK	common.h	247;"	d
_ST_MAX_OSFD	common.h	262;"	d
_ST_OSFD_CNT	common.h	270;"	d
_ST_PAGE_SIZE	common.h	256;"	d
_ST_POLLFDS	common.h	271;"	d
_ST_POLLFDS_SIZE	common.h	272;"	d
_ST_POLLQUEUE_PTR	common.h	335;"	d
_ST_RESTORE_CONTEXT	common.h	385;"	d
_ST_RUNQ	common.h	249;"	d
_ST_SET_CURRENT_THREAD	common.h	245;"	d
_ST_SLEEPQ	common.h	258;"	d
_ST_SLEEPQ_SIZE	common.h	259;"	d
_ST_STACK_PAD_SIZE	common.h	403;"	d
_ST_ST_COND_WAIT	common.h	306;"	d
_ST_ST_IO_WAIT	common.h	304;"	d
_ST_ST_LOCK_WAIT	common.h	305;"	d
_ST_ST_RUNNABLE	common.h	303;"	d
_ST_ST_RUNNING	common.h	302;"	d
_ST_ST_SLEEPING	common.h	307;"	d
_ST_ST_SUSPENDED	common.h	309;"	d
_ST_ST_ZOMBIE	common.h	308;"	d
_ST_SWITCH_CONTEXT	common.h	373;"	d
_ST_THREADQ	common.h	253;"	d
_ST_THREAD_PTR	common.h	326;"	d
_ST_THREAD_STACK_PTR	common.h	332;"	d
_ST_THREAD_THREADQ_PTR	common.h	339;"	d
_ST_THREAD_WAITQ_PTR	common.h	329;"	d
_ST_ZOMBIEQ	common.h	251;"	d
__STX_FILEIO_H__	extensions/stx_fileio.h	39;"	d
__ST_COMMON_H__	common.h	43;"	d
__ST_MD_H__	md.h	43;"	d
__ST_THREAD_H__	public.h	38;"	d
_getlong	extensions/dnsres.c	73;"	d	file:
_getshort	examples/res.c	82;"	d	file:
_getshort	extensions/dnsres.c	72;"	d	file:
_ia64_cxt_restore	ia64asm.S	/^_ia64_cxt_restore:$/;"	l
_ia64_cxt_save	ia64asm.S	/^_ia64_cxt_save:$/;"	l
_st_active_count	sched.c	/^int _st_active_count = 0;       \/* Active thread count *\/$/;"	v
_st_add_sleep_q	sched.c	/^void _st_add_sleep_q(_st_thread_t *thread, st_utime_t timeout)$/;"	f
_st_clist	common.h	/^typedef struct _st_clist {$/;"	s
_st_clist_t	common.h	/^} _st_clist_t;$/;"	t	typeref:struct:_st_clist
_st_cond	common.h	/^typedef struct _st_cond {$/;"	s
_st_cond_signal	sync.c	/^static int _st_cond_signal(_st_cond_t *cvar, int broadcast)$/;"	f	file:
_st_cond_t	common.h	/^} _st_cond_t;$/;"	t	typeref:struct:_st_cond
_st_curr_time	sched.c	/^time_t _st_curr_time = 0;       \/* Current time as returned by time(2) *\/$/;"	v
_st_del_sleep_q	sched.c	/^void _st_del_sleep_q(_st_thread_t *thread)$/;"	f
_st_destructor_t	common.h	/^typedef void  (*_st_destructor_t)(void *);$/;"	t
_st_destructors	key.c	/^static _st_destructor_t _st_destructors[ST_KEYS_MAX];$/;"	v	file:
_st_find_bad_fd	sched.c	/^void _st_find_bad_fd(void)$/;"	f
_st_free_stacks	stk.c	/^_st_clist_t _st_free_stacks = ST_INIT_STATIC_CLIST(&_st_free_stacks);$/;"	v
_st_idle_thread_start	sched.c	/^void *_st_idle_thread_start(void *arg)$/;"	f
_st_io_init	io.c	/^int _st_io_init(void)$/;"	f
_st_iterate_threads	sched.c	/^void _st_iterate_threads(void)$/;"	f
_st_iterate_threads_flag	sched.c	/^int _st_iterate_threads_flag = 0;$/;"	v
_st_last_tset	sched.c	/^st_utime_t _st_last_tset;       \/* Last time it was fetched *\/$/;"	v
_st_mutex	common.h	/^typedef struct _st_mutex {$/;"	s
_st_mutex_t	common.h	/^} _st_mutex_t;$/;"	t	typeref:struct:_st_mutex
_st_netfd	common.h	/^typedef struct _st_netfd {$/;"	s
_st_netfd_free_aux_data	io.c	/^static void _st_netfd_free_aux_data(_st_netfd_t *fd)$/;"	f	file:
_st_netfd_freelist	io.c	/^static _st_netfd_t *_st_netfd_freelist = NULL;$/;"	v	file:
_st_netfd_new	io.c	/^static _st_netfd_t *_st_netfd_new(int osfd, int nonblock, int is_socket)$/;"	f	file:
_st_netfd_t	common.h	/^} _st_netfd_t;$/;"	t	typeref:struct:_st_netfd
_st_new_stk_segment	stk.c	/^static char *_st_new_stk_segment(int size)$/;"	f	file:
_st_num_free_stacks	stk.c	/^int _st_num_free_stacks = 0;$/;"	v
_st_osfd_limit	io.c	/^static int _st_osfd_limit = -1;$/;"	v	file:
_st_pollq	common.h	/^typedef struct _st_pollq {$/;"	s
_st_pollq_t	common.h	/^} _st_pollq_t;$/;"	t	typeref:struct:_st_pollq
_st_randomize_stacks	stk.c	/^int _st_randomize_stacks = 0;$/;"	v
_st_show_thread_stack	sched.c	/^void _st_show_thread_stack(_st_thread_t *thread, const char *messg)$/;"	f
_st_stack	common.h	/^typedef struct _st_stack {$/;"	s
_st_stack_free	stk.c	/^void _st_stack_free(_st_stack_t *ts)$/;"	f
_st_stack_new	stk.c	/^_st_stack_t *_st_stack_new(int stack_size)$/;"	f
_st_stack_t	common.h	/^} _st_stack_t;$/;"	t	typeref:struct:_st_stack
_st_this_thread	sched.c	/^_st_thread_t *_st_this_thread;  \/* Current thread *\/$/;"	v
_st_this_vp	sched.c	/^_st_vp_t _st_this_vp;           \/* This VP *\/$/;"	v
_st_thread	common.h	/^struct _st_thread {$/;"	s
_st_thread_cleanup	key.c	/^void _st_thread_cleanup(_st_thread_t *thread)$/;"	f
_st_thread_main	sched.c	/^void _st_thread_main(void)$/;"	f
_st_thread_t	common.h	/^typedef struct _st_thread _st_thread_t;$/;"	t	typeref:struct:_st_thread
_st_utime	sync.c	/^static st_utime_t (*_st_utime)(void) = NULL;$/;"	v	file:
_st_vp	common.h	/^typedef struct _st_vp {$/;"	s
_st_vp_check_clock	sched.c	/^void _st_vp_check_clock(void)$/;"	f
_st_vp_idle	sched.c	/^void _st_vp_idle(void)$/;"	f
_st_vp_schedule	sched.c	/^void _st_vp_schedule(void)$/;"	f
_st_vp_t	common.h	/^} _st_vp_t;$/;"	t	typeref:struct:_st_vp
_stx_cache	extensions/lrucache.c	/^struct _stx_cache {$/;"	s	file:
_stx_cache_info	extensions/stx.h	/^typedef struct _stx_cache_info {$/;"	s
_stx_centry	extensions/lrucache.c	/^struct _stx_centry {$/;"	s	file:
_stx_clist	extensions/common.h	/^typedef struct _stx_clist {$/;"	s
_stx_dns_cache	extensions/dnscache.c	/^stx_cache_t *_stx_dns_cache = NULL;$/;"	v
_stx_dns_cache_getaddrlist	extensions/dnscache.c	/^int _stx_dns_cache_getaddrlist(const char *hostname, struct in_addr *addrs,$/;"	f
_stx_dns_data	extensions/dnscache.c	/^typedef struct _stx_dns_data {$/;"	s	file:
_stx_dns_getaddrlist	extensions/dnsres.c	/^int _stx_dns_getaddrlist(const char *host, struct in_addr *addrs,$/;"	f
_stx_dns_ttl	extensions/dnsres.c	/^int _stx_dns_ttl;$/;"	v
accept	docs/reference.html	/^<A NAME="accept">$/;"	a
addr	examples/server.c	/^  char *addr;                   \/* Bind address                         *\/$/;"	m	struct:socket_info	file:
addr_list	extensions/dnscache.c	/^static struct in_addr addr_list[MAX_HOST_ADDRS];$/;"	v	typeref:struct:in_addr	file:
addrs	extensions/dnscache.c	/^    struct in_addr *addrs;$/;"	m	struct:_stx_dns_data	typeref:struct:_stx_dns_data::in_addr	file:
arg	common.h	/^  void *arg;                  \/* Argument of the start function *\/$/;"	m	struct:_st_thread
aux_data	common.h	/^  void *aux_data;             \/* Auxiliary data for internal use *\/$/;"	m	struct:_st_netfd
block	docs/reference.html	/^<A NAME="block">$/;"	a
bsp	common.h	/^  void *bsp;                  \/* Register stack backing store pointer *\/$/;"	m	struct:_st_stack
buf	examples/res.c	/^    u_char buf[MAXPACKET];$/;"	m	union:__anon1	file:
buf	extensions/dnsres.c	/^    u_char buf[MAXPACKET];$/;"	m	union:__anon4	file:
busy_threads	examples/server.c	/^  int busy_threads;             \/* Number of threads processing request *\/$/;"	m	struct:socket_info	file:
change_user	examples/server.c	/^static void change_user(void)$/;"	f	file:
child_sighandler	examples/server.c	/^static void child_sighandler(int signo)$/;"	f	file:
cleanup_entry	extensions/dnscache.c	/^static void cleanup_entry(void *key, void *data)$/;"	f	file:
cleanup_fn	extensions/lrucache.c	/^  void          (*cleanup_fn)(void *, void *);$/;"	m	struct:_stx_cache	file:
cond_broadcast	docs/reference.html	/^<A NAME="cond_broadcast">$/;"	a
cond_destroy	docs/reference.html	/^<A NAME="cond_destroy">$/;"	a
cond_new	docs/reference.html	/^<A NAME="cond_new">$/;"	a
cond_signal	docs/reference.html	/^<A NAME="cond_signal">$/;"	a
cond_t	docs/reference.html	/^<A NAME="cond_t">$/;"	a
cond_timedwait	docs/reference.html	/^<A NAME="cond_timedwait">$/;"	a
cond_wait	docs/reference.html	/^<A NAME="cond_wait">$/;"	a
connect	docs/reference.html	/^<A NAME="connect">$/;"	a
context	common.h	/^  jmp_buf context;            \/* Thread's context *\/$/;"	m	struct:_st_thread
control_fd	extensions/stx_fileio.c	/^    st_netfd_t control_fd;$/;"	m	struct:__anon2	file:
cpu_count	examples/proxy.c	/^static int cpu_count(void)$/;"	f	file:
cpu_count	examples/server.c	/^static int cpu_count(void)$/;"	f	file:
create_listeners	examples/server.c	/^static void create_listeners(void)$/;"	f	file:
cur	extensions/dnscache.c	/^    int cur;$/;"	m	struct:_stx_dns_data	file:
cur_size	extensions/lrucache.c	/^  size_t            cur_size;    \/* current size of cache *\/$/;"	m	struct:_stx_cache	file:
cur_size	extensions/stx.h	/^  size_t cur_size;$/;"	m	struct:_stx_cache_info
cur_weight	extensions/lrucache.c	/^  size_t            cur_weight;  \/* current total "weight" of all entries *\/$/;"	m	struct:_stx_cache	file:
cur_weight	extensions/stx.h	/^  size_t cur_weight;$/;"	m	struct:_stx_cache_info
data	extensions/lrucache.c	/^  void               *data;          \/* data in the cache *\/$/;"	m	struct:_stx_centry	file:
data_fd	extensions/stx_fileio.c	/^    st_netfd_t data_fd;$/;"	m	struct:__anon2	file:
delete_pending	extensions/lrucache.c	/^  int                delete_pending; \/* pending delete flag *\/$/;"	m	struct:_stx_centry	file:
deletes	extensions/lrucache.c	/^  unsigned long     deletes;     \/* num deletes *\/$/;"	m	struct:_stx_cache	file:
deletes	extensions/stx.h	/^  unsigned long deletes;$/;"	m	struct:_stx_cache_info
destructor	common.h	/^  _st_destructor_t destructor; \/* Private data destructor function *\/$/;"	m	struct:_st_netfd
dns_getaddr	examples/res.c	/^int dns_getaddr(const char *host, struct in_addr *addr, st_utime_t timeout)$/;"	f
do_resolve	examples/lookupdns.c	/^void *do_resolve(void *host)$/;"	f
do_resolve	extensions/testdns.c	/^static void do_resolve(const char *host)$/;"	f	file:
due	common.h	/^  st_utime_t due;             \/* Wakeup time when thread is sleeping *\/$/;"	m	struct:_st_thread
dump_server_info	examples/server.c	/^static void dump_server_info(void)$/;"	f	file:
err_doit	examples/error.c	/^static void err_doit(int fd, int errnoflag, const char *fmt, va_list ap)$/;"	f	file:
err_quit	examples/error.c	/^void err_quit(int fd, const char *fmt, ...)$/;"	f
err_report	examples/error.c	/^void err_report(int fd, const char *fmt, ...)$/;"	f
err_sys_dump	examples/error.c	/^void err_sys_dump(int fd, const char *fmt, ...)$/;"	f
err_sys_quit	examples/error.c	/^void err_sys_quit(int fd, const char *fmt, ...)$/;"	f
err_sys_report	examples/error.c	/^void err_sys_report(int fd, const char *fmt, ...)$/;"	f
err_tstamp	examples/error.c	/^char *err_tstamp(void)$/;"	f
errfd	examples/server.c	/^static int errfd        = STDERR_FILENO;$/;"	v	file:
errors	docs/reference.html	/^<A NAME="errors">$/;"	a
events	public.h	/^	short events;$/;"	m	struct:pollfd
expires	extensions/dnscache.c	/^    time_t expires;$/;"	m	struct:_stx_dns_data	file:
fd	public.h	/^	int fd;$/;"	m	struct:pollfd
fd_exception_set	common.h	/^  fd_set fd_read_set, fd_write_set, fd_exception_set;$/;"	m	struct:_st_vp
fd_read_set	common.h	/^  fd_set fd_read_set, fd_write_set, fd_exception_set;$/;"	m	struct:_st_vp
fd_ref_cnts	common.h	/^  int fd_ref_cnts[FD_SETSIZE][3];$/;"	m	struct:_st_vp
fd_write_set	common.h	/^  fd_set fd_read_set, fd_write_set, fd_exception_set;$/;"	m	struct:_st_vp
fdcnt	common.h	/^  int fdcnt;$/;"	m	struct:_st_vp
file_reader	extensions/stx_fileio.c	/^file_reader(int fd, int *fd_control, int *fd_out)$/;"	f
file_reader_cb_t	extensions/stx_fileio.c	/^} file_reader_cb_t;$/;"	t	typeref:struct:__anon3	file:
fileio_data_destructor	extensions/stx_fileio.c	/^fileio_data_destructor(void *dat_in)$/;"	f	file:
fileio_data_t	extensions/stx_fileio.c	/^} fileio_data_t;$/;"	t	typeref:struct:__anon2	file:
flags	common.h	/^  int flags;                  \/* Thread's flags *\/$/;"	m	struct:_st_thread
flush_acclog_buffer	examples/server.c	/^static void *flush_acclog_buffer(void *arg)$/;"	f	file:
flush_cache	extensions/testdns.c	/^static void flush_cache(void)$/;"	f	file:
get_fileio_data	extensions/stx_fileio.c	/^static fileio_data_t *get_fileio_data(st_netfd_t fd)$/;"	f	file:
handle_connections	examples/server.c	/^static void *handle_connections(void *arg)$/;"	f	file:
handle_request	examples/proxy.c	/^static void *handle_request(void *arg)$/;"	f	file:
handle_session	examples/server.c	/^void handle_session(long srv_socket_index, st_netfd_t cli_nfd)$/;"	f
hash_hostname	extensions/dnscache.c	/^static unsigned long hash_hostname(const void *key)$/;"	f	file:
hash_size	extensions/lrucache.c	/^  size_t	    hash_size;   \/* size of hash table *\/$/;"	m	struct:_stx_cache	file:
hash_size	extensions/stx.h	/^  size_t hash_size;$/;"	m	struct:_stx_cache_info
hdr	examples/res.c	/^    HEADER hdr;$/;"	m	union:__anon1	file:
hdr	extensions/dnsres.c	/^    HEADER hdr;$/;"	m	union:__anon4	file:
heap_delete	sched.c	/^static void heap_delete(_st_thread_t *thread) {$/;"	f	file:
heap_index	common.h	/^  int heap_index;$/;"	m	struct:_st_thread
heap_insert	sched.c	/^static _st_thread_t **heap_insert(_st_thread_t *thread) {$/;"	f	file:
hits	extensions/lrucache.c	/^  unsigned long     hits;        \/* num cache hits *\/$/;"	m	struct:_stx_cache	file:
hits	extensions/stx.h	/^  unsigned long hits;$/;"	m	struct:_stx_cache_info
idle_thread	common.h	/^  _st_thread_t *idle_thread;  \/* Idle thread for this vp *\/$/;"	m	struct:_st_vp
init	docs/reference.html	/^<A NAME="init">$/;"	a
insert_entry	extensions/dnscache.c	/^static void insert_entry(const char *host, struct in_addr *addrs, int count)$/;"	f	file:
inserts	extensions/lrucache.c	/^  unsigned long     inserts;     \/* num inserts *\/$/;"	m	struct:_stx_cache	file:
inserts	extensions/stx.h	/^  unsigned long inserts;$/;"	m	struct:_stx_cache_info
install_sighandlers	examples/server.c	/^static void install_sighandlers(void)$/;"	f	file:
inter	docs/notes.html	/^<A NAME="inter">$/;"	a
interactive_mode	examples/server.c	/^static int interactive_mode = 0;$/;"	v	file:
intra	docs/notes.html	/^<A NAME="intra">$/;"	a
inuse	common.h	/^  int inuse;                  \/* In-use flag *\/$/;"	m	struct:_st_netfd
io	docs/reference.html	/^<A NAME="io">$/;"	a
io_q	common.h	/^  _st_clist_t io_q;           \/* io queue for this vp *\/$/;"	m	struct:_st_vp
ioq_pollfds	common.h	/^  struct pollfd *ioq_pollfds;$/;"	m	struct:_st_vp	typeref:struct:_st_vp::pollfd
ioq_pollfds_size	common.h	/^  int ioq_pollfds_size;$/;"	m	struct:_st_vp
key	extensions/lrucache.c	/^  void               *key;           \/* key for doing lookups *\/$/;"	m	struct:_stx_centry	file:
key_cmp_fn	extensions/lrucache.c	/^  long          (*key_cmp_fn)(const void *, const void *);$/;"	m	struct:_stx_cache	file:
key_create	docs/reference.html	/^<A NAME="key_create">$/;"	a
key_getlimit	docs/reference.html	/^<A NAME="key_getlimit">$/;"	a
key_hash_fn	extensions/lrucache.c	/^  unsigned long (*key_hash_fn)(const void *);$/;"	m	struct:_stx_cache	file:
key_max	key.c	/^static int key_max = 0;$/;"	v	file:
last_clock	common.h	/^  st_utime_t last_clock;      \/* The last time we went into vp_check_clock() *\/$/;"	m	struct:_st_vp
left	common.h	/^  _st_thread_t *left;         \/* For putting in timeout heap *\/$/;"	m	struct:_st_thread
links	common.h	/^  _st_clist_t links;          \/* For putting on io queue *\/$/;"	m	struct:_st_pollq
links	common.h	/^  _st_clist_t links;          \/* For putting on run\/sleep\/zombie queue *\/$/;"	m	struct:_st_thread
links	common.h	/^  _st_clist_t links;$/;"	m	struct:_st_stack
listenq_size	examples/server.c	/^static int listenq_size = LISTENQ_SIZE_DEFAULT;$/;"	v	file:
load_configs	examples/server.c	/^void load_configs(void)$/;"	f
log_access	examples/server.c	/^static int log_access       = 0;$/;"	v	file:
logbuf_close	examples/server.c	/^void logbuf_close(void)$/;"	f
logbuf_flush	examples/server.c	/^void logbuf_flush(void)$/;"	f
logbuf_open	examples/server.c	/^void logbuf_open(void)$/;"	f
logdir	examples/server.c	/^static char *logdir     = NULL;$/;"	v	file:
lookup_entry	extensions/dnscache.c	/^static int lookup_entry(const char *host, struct in_addr *addrs,$/;"	f	file:
lookups	extensions/lrucache.c	/^  unsigned long     lookups;     \/* num cache lookups *\/$/;"	m	struct:_stx_cache	file:
lookups	extensions/stx.h	/^  unsigned long lookups;$/;"	m	struct:_stx_cache_info
lru_link	extensions/lrucache.c	/^  stx_clist_t        lru_link;       \/* for putting this entry on LRU list *\/$/;"	m	struct:_stx_centry	file:
lru_list	extensions/lrucache.c	/^  stx_clist_t       lru_list;    \/* least-recently-used list *\/$/;"	m	struct:_stx_cache	file:
main	examples/lookupdns.c	/^int main(int argc, char *argv[])$/;"	f
main	examples/proxy.c	/^int main(int argc, char *argv[])$/;"	f
main	examples/server.c	/^int main(int argc, char *argv[])$/;"	f
main	extensions/testdns.c	/^int main()$/;"	f
max_size	extensions/lrucache.c	/^  size_t	    max_size;    \/* max size of cache *\/$/;"	m	struct:_stx_cache	file:
max_size	extensions/stx.h	/^  size_t max_size;$/;"	m	struct:_stx_cache_info
max_threads	examples/server.c	/^static int max_threads = 0;       \/* Max number of threads         *\/$/;"	v	file:
max_wait_threads	examples/server.c	/^static int max_wait_threads = 0;  \/* Max number of "spare" threads *\/$/;"	v	file:
max_weight	extensions/lrucache.c	/^  size_t            max_weight;  \/* cache capacity *\/$/;"	m	struct:_stx_cache	file:
max_weight	extensions/stx.h	/^  size_t max_weight;$/;"	m	struct:_stx_cache_info
maxfd	common.h	/^  int maxfd;$/;"	m	struct:_st_vp
min_wait_threads	examples/server.c	/^static int min_wait_threads = 2;  \/* Min number of "spare" threads *\/$/;"	v	file:
mutex_destroy	docs/reference.html	/^<A NAME="mutex_destroy">$/;"	a
mutex_lock	docs/reference.html	/^<A NAME="mutex_lock">$/;"	a
mutex_new	docs/reference.html	/^<A NAME="mutex_new">$/;"	a
mutex_t	docs/reference.html	/^<A NAME="mutex_t">$/;"	a
mutex_trylock	docs/reference.html	/^<A NAME="mutex_trylock">$/;"	a
mutex_unlock	docs/reference.html	/^<A NAME="mutex_unlock">$/;"	a
my_index	examples/server.c	/^static int my_index = -1;       \/* Current process index *\/$/;"	v	file:
my_pid	examples/server.c	/^static pid_t my_pid = -1;       \/* Current process pid   *\/$/;"	v	file:
nbytes	extensions/stx_fileio.c	/^    ssize_t nbytes;$/;"	m	struct:__anon3	file:
netfd_close	docs/reference.html	/^<A NAME="netfd_close">$/;"	a
netfd_fileno	docs/reference.html	/^<A NAME="netfd_fileno">$/;"	a
netfd_free	docs/reference.html	/^<A NAME="netfd_free">$/;"	a
netfd_getspecific	docs/reference.html	/^<A NAME="netfd_getspecific">$/;"	a
netfd_open	docs/reference.html	/^<A NAME="netfd_open">$/;"	a
netfd_open_socket	docs/reference.html	/^<A NAME="netfd_open_socket">$/;"	a
netfd_poll	docs/reference.html	/^<A NAME="netfd_poll">$/;"	a
netfd_serialize_accept	docs/reference.html	/^<A NAME="netfd_serialize_accept">$/;"	a
netfd_setspecific	docs/reference.html	/^<A NAME="netfd_setspecific">$/;"	a
netfd_t	docs/reference.html	/^<A NAME="netfd_t">$/;"	a
next	common.h	/^  struct _st_clist *next;$/;"	m	struct:_st_clist	typeref:struct:_st_clist::_st_clist
next	common.h	/^  struct _st_netfd *next;     \/* For putting on the free list *\/$/;"	m	struct:_st_netfd	typeref:struct:_st_netfd::_st_netfd
next	extensions/common.h	/^  struct _stx_clist *next;$/;"	m	struct:_stx_clist	typeref:struct:_stx_clist::_stx_clist
next	extensions/lrucache.c	/^  struct _stx_centry *next;          \/* next entry *\/$/;"	m	struct:_stx_centry	typeref:struct:_stx_centry::_stx_centry	file:
nfd	examples/server.c	/^  st_netfd_t nfd;               \/* Listening socket                     *\/$/;"	m	struct:socket_info	file:
nonnet	docs/notes.html	/^<A NAME="nonnet">$/;"	a
npds	common.h	/^  int npds;                   \/* Length of the array *\/$/;"	m	struct:_st_pollq
num_addrs	extensions/dnscache.c	/^    int num_addrs;$/;"	m	struct:_stx_dns_data	file:
offset	extensions/stx_fileio.c	/^    off_t offset;$/;"	m	struct:__anon3	file:
offsetof	common.h	323;"	d
offsetof	extensions/common.h	71;"	d
on_ioq	common.h	/^  int on_ioq;                 \/* Is it on ioq? *\/$/;"	m	struct:_st_pollq
open	docs/reference.html	/^<A NAME="open">$/;"	a
open_log_files	examples/server.c	/^static void open_log_files(void)$/;"	f	file:
osfd	common.h	/^  int osfd;                   \/* Underlying OS file descriptor *\/$/;"	m	struct:_st_netfd
owner	common.h	/^  _st_thread_t *owner;        \/* Current mutex owner *\/$/;"	m	struct:_st_mutex
pagesize	common.h	/^  int pagesize;$/;"	m	struct:_st_vp
parse_answer	examples/res.c	/^static int parse_answer(querybuf_t *ans, int len, struct in_addr *addr)$/;"	f	file:
parse_answer	extensions/dnsres.c	/^static int parse_answer(querybuf_t *ans, int len, struct in_addr *addrs,$/;"	f	file:
parse_arguments	examples/server.c	/^static void parse_arguments(int argc, char *argv[])$/;"	f	file:
pds	common.h	/^  struct pollfd *pds;         \/* Array of poll descriptors *\/$/;"	m	struct:_st_pollq	typeref:struct:_st_pollq::pollfd
pid	extensions/stx_fileio.c	/^    pid_t pid;$/;"	m	struct:__anon2	file:
poll	docs/reference.html	/^<A NAME="poll">$/;"	a
pollfd	public.h	/^struct pollfd$/;"	s
port	examples/server.c	/^  int port;                     \/* Port                                 *\/$/;"	m	struct:socket_info	file:
porting	docs/notes.html	/^<A NAME="porting">$/;"	a
prev	common.h	/^  struct _st_clist *prev;$/;"	m	struct:_st_clist	typeref:struct:_st_clist::_st_clist
prev	extensions/common.h	/^  struct _stx_clist *prev;$/;"	m	struct:_stx_clist	typeref:struct:_stx_clist::_stx_clist
print_sys_error	examples/proxy.c	/^static void print_sys_error(const char *msg)$/;"	f	file:
printhost	extensions/testdns.c	/^static void printhost(void *host, void *data)$/;"	f	file:
priv	docs/reference.html	/^<A NAME="priv">$/;"	a
private_data	common.h	/^  void **private_data;        \/* Per thread private data *\/$/;"	m	struct:_st_thread
private_data	common.h	/^  void *private_data;         \/* Per descriptor private data *\/$/;"	m	struct:_st_netfd
process_signals	examples/server.c	/^static void *process_signals(void *arg)$/;"	f	file:
prog	examples/proxy.c	/^static char *prog;                     \/* Program name   *\/$/;"	v	file:
progr	docs/reference.html	/^<A NAME="progr">$/;"	a
pthis	extensions/lrucache.c	/^  struct _stx_centry **pthis;$/;"	m	struct:_stx_centry	typeref:struct:_stx_centry::_stx_centry	file:
query_domain	examples/res.c	/^static int query_domain(st_netfd_t nfd, const char *name, struct in_addr *addr,$/;"	f	file:
query_domain	extensions/dnsres.c	/^static int query_domain(st_netfd_t nfd, const char *name,$/;"	f	file:
querybuf_t	examples/res.c	/^} querybuf_t;$/;"	t	typeref:union:__anon1	file:
querybuf_t	extensions/dnsres.c	/^} querybuf_t;$/;"	t	typeref:union:__anon4	file:
randomize_stacks	docs/reference.html	/^<A NAME="randomize_stacks">$/;"	a
read	docs/reference.html	/^<A NAME="read">$/;"	a
read_address	examples/proxy.c	/^static void read_address(const char *str, struct sockaddr_in *sin)$/;"	f	file:
read_fully	docs/reference.html	/^<A NAME="read_fully">$/;"	a
read_resid	docs/reference.html	/^<A NAME="read_resid">$/;"	a
recvfrom	docs/reference.html	/^<A NAME="recvfrom">$/;"	a
ref_count	extensions/lrucache.c	/^  int                ref_count;      \/* use count for this entry *\/$/;"	m	struct:_stx_centry	file:
refs1	docs/st.html	/^<A NAME="refs1">$/;"	a
refs2	docs/st.html	/^<A NAME="refs2">$/;"	a
refs3	docs/st.html	/^<A NAME="refs3">$/;"	a
refs4	docs/st.html	/^<A NAME="refs4">$/;"	a
refs5	docs/st.html	/^<A NAME="refs5">$/;"	a
refs6	docs/st.html	/^<A NAME="refs6">$/;"	a
refs7	docs/st.html	/^<A NAME="refs7">$/;"	a
retval	common.h	/^  void *retval;               \/* Return value of the start function *\/$/;"	m	struct:_st_thread
revents	public.h	/^	short revents;$/;"	m	struct:pollfd
right	common.h	/^  _st_thread_t *right;	      \/* -- see docs\/timeout_heap.txt for details *\/$/;"	m	struct:_st_thread
rmt_addr	examples/proxy.c	/^static struct sockaddr_in rmt_addr;    \/* Remote address *\/$/;"	v	typeref:struct:sockaddr_in	file:
rqst_count	examples/server.c	/^  int rqst_count;               \/* Total number of processed requests   *\/$/;"	m	struct:socket_info	file:
run_q	common.h	/^  _st_clist_t run_q;          \/* run queue for this vp *\/$/;"	m	struct:_st_vp
s	docs/notes.html	/^functions (<TT>st_thread_join(), st_cond_wait(), <\/TT>etc.).  As a result,$/;"	f
sendto	docs/reference.html	/^<A NAME="sendto">$/;"	a
serialize_accept	examples/server.c	/^static int serialize_accept = 0;$/;"	v	file:
set_concurrency	examples/proxy.c	/^static void set_concurrency(int nproc)$/;"	f	file:
set_thread_throttling	examples/server.c	/^static void set_thread_throttling(void)$/;"	f	file:
show_info	extensions/testdns.c	/^static void show_info(void)$/;"	f	file:
show_lru	extensions/testdns.c	/^static void show_lru(void)$/;"	f	file:
show_mru	extensions/testdns.c	/^static void show_mru(void)$/;"	f	file:
sig_pipe	examples/server.c	/^static st_netfd_t sig_pipe[2];  \/* Signal pipe           *\/$/;"	v	file:
signals	docs/notes.html	/^<A NAME="signals">$/;"	a
sk_count	examples/server.c	/^static int sk_count = 0;        \/* Number of listening sockets          *\/$/;"	v	file:
sleep	docs/reference.html	/^<A NAME="sleep">$/;"	a
sleep_q	common.h	/^  _st_thread_t *sleep_q;      \/* sleep queue for this vp *\/$/;"	m	struct:_st_vp
sleepq_size	common.h	/^  int sleepq_size;	      \/* number of threads on sleep queue *\/$/;"	m	struct:_st_vp
socket_info	examples/server.c	/^struct socket_info {$/;"	s	file:
socklen_t	md.h	566;"	d
socklen_t	md.h	70;"	d
sp	common.h	/^  void *sp;                   \/* Stack pointer from C's point of view *\/$/;"	m	struct:_st_stack
srv_socket	examples/server.c	/^} srv_socket[MAX_BIND_ADDRS];   \/* Array of listening sockets           *\/$/;"	v	typeref:struct:socket_info
st_accept	io.c	/^_st_netfd_t *st_accept(_st_netfd_t *fd, struct sockaddr *addr, int *addrlen,$/;"	f
st_cond_broadcast	sync.c	/^int st_cond_broadcast(_st_cond_t *cvar)$/;"	f
st_cond_destroy	sync.c	/^int st_cond_destroy(_st_cond_t *cvar)$/;"	f
st_cond_new	sync.c	/^_st_cond_t *st_cond_new(void)$/;"	f
st_cond_signal	sync.c	/^int st_cond_signal(_st_cond_t *cvar)$/;"	f
st_cond_t	public.h	/^typedef struct _st_cond *   st_cond_t;$/;"	t	typeref:struct:_st_cond
st_cond_timedwait	sync.c	/^int st_cond_timedwait(_st_cond_t *cvar, st_utime_t timeout)$/;"	f
st_cond_wait	sync.c	/^int st_cond_wait(_st_cond_t *cvar)$/;"	f
st_connect	io.c	/^int st_connect(_st_netfd_t *fd, const struct sockaddr *addr, int addrlen,$/;"	f
st_getfdlimit	docs/reference.html	/^<A NAME="st_getfdlimit">$/;"	a
st_getfdlimit	io.c	/^int st_getfdlimit(void)$/;"	f
st_init	docs/reference.html	/^<A NAME="st_init">$/;"	a
st_init	sched.c	/^int st_init(void)$/;"	f
st_key_create	key.c	/^int st_key_create(int *keyp, _st_destructor_t destructor)$/;"	f
st_key_getlimit	key.c	/^int st_key_getlimit(void)$/;"	f
st_mutex_destroy	sync.c	/^int st_mutex_destroy(_st_mutex_t *lock)$/;"	f
st_mutex_lock	sync.c	/^int st_mutex_lock(_st_mutex_t *lock)$/;"	f
st_mutex_new	sync.c	/^_st_mutex_t *st_mutex_new(void)$/;"	f
st_mutex_t	public.h	/^typedef struct _st_mutex *  st_mutex_t;$/;"	t	typeref:struct:_st_mutex
st_mutex_trylock	sync.c	/^int st_mutex_trylock(_st_mutex_t *lock)$/;"	f
st_mutex_unlock	sync.c	/^int st_mutex_unlock(_st_mutex_t *lock)$/;"	f
st_netfd_close	io.c	/^int st_netfd_close(_st_netfd_t *fd)$/;"	f
st_netfd_fileno	io.c	/^int st_netfd_fileno(_st_netfd_t *fd)$/;"	f
st_netfd_free	io.c	/^void st_netfd_free(_st_netfd_t *fd)$/;"	f
st_netfd_getspecific	io.c	/^void *st_netfd_getspecific(_st_netfd_t *fd)$/;"	f
st_netfd_open	io.c	/^_st_netfd_t *st_netfd_open(int osfd)$/;"	f
st_netfd_open_socket	io.c	/^_st_netfd_t *st_netfd_open_socket(int osfd)$/;"	f
st_netfd_poll	io.c	/^int st_netfd_poll(_st_netfd_t *fd, int how, st_utime_t timeout)$/;"	f
st_netfd_serialize_accept	io.c	/^int st_netfd_serialize_accept(_st_netfd_t *fd)$/;"	f
st_netfd_setspecific	io.c	/^void st_netfd_setspecific(_st_netfd_t *fd, void *value,$/;"	f
st_netfd_t	public.h	/^typedef struct _st_netfd *  st_netfd_t;$/;"	t	typeref:struct:_st_netfd
st_open	io.c	/^_st_netfd_t *st_open(const char *path, int oflags, mode_t mode)$/;"	f
st_poll	sched.c	/^int st_poll(struct pollfd *pds, int npds, st_utime_t timeout)$/;"	f
st_randomize_stacks	stk.c	/^int st_randomize_stacks(int on)$/;"	f
st_read	io.c	/^ssize_t st_read(_st_netfd_t *fd, void *buf, size_t nbyte, st_utime_t timeout)$/;"	f
st_read_fully	io.c	/^ssize_t st_read_fully(_st_netfd_t *fd, void *buf, size_t nbyte,$/;"	f
st_read_resid	io.c	/^int st_read_resid(_st_netfd_t *fd, void *buf, size_t *resid,$/;"	f
st_recvfrom	io.c	/^int st_recvfrom(_st_netfd_t *fd, void *buf, int len, struct sockaddr *from,$/;"	f
st_sendto	io.c	/^int st_sendto(_st_netfd_t *fd, const void *msg, int len,$/;"	f
st_set_utime_function	sync.c	/^int st_set_utime_function(st_utime_t (*func)(void))$/;"	f
st_sleep	sync.c	/^int st_sleep(int secs)$/;"	f
st_thread_create	sched.c	/^_st_thread_t *st_thread_create(void *(*start)(void *arg), void *arg,$/;"	f
st_thread_exit	sched.c	/^void st_thread_exit(void *retval)$/;"	f
st_thread_getspecific	key.c	/^void *st_thread_getspecific(int key)$/;"	f
st_thread_interrupt	sched.c	/^void st_thread_interrupt(_st_thread_t *thread)$/;"	f
st_thread_join	sched.c	/^int st_thread_join(_st_thread_t *thread, void **retvalp)$/;"	f
st_thread_self	sched.c	/^_st_thread_t *st_thread_self(void)$/;"	f
st_thread_setspecific	key.c	/^int st_thread_setspecific(int key, void *value)$/;"	f
st_thread_t	public.h	/^typedef struct _st_thread * st_thread_t;$/;"	t	typeref:struct:_st_thread
st_time	sync.c	/^time_t st_time(void)$/;"	f
st_timecache_set	sync.c	/^int st_timecache_set(int on)$/;"	f
st_usleep	sync.c	/^int st_usleep(st_utime_t usecs)$/;"	f
st_utime	sync.c	/^st_utime_t st_utime(void)$/;"	f
st_utime_last_clock	sync.c	/^st_utime_t st_utime_last_clock(void)$/;"	f
st_utime_t	public.h	/^typedef unsigned long long  st_utime_t;$/;"	t
st_write	io.c	/^ssize_t st_write(_st_netfd_t *fd, const void *buf, size_t nbyte,$/;"	f
st_write_resid	io.c	/^int st_write_resid(_st_netfd_t *fd, const void *buf, size_t *resid,$/;"	f
st_writev	io.c	/^ssize_t st_writev(_st_netfd_t *fd, const struct iovec *iov, int iov_size,$/;"	f
stack	common.h	/^  _st_stack_t *stack;	      \/* Info about thread's stack *\/$/;"	m	struct:_st_thread
start	common.h	/^  void *(*start)(void *arg);  \/* The start function of the thread *\/$/;"	m	struct:_st_thread
start_daemon	examples/proxy.c	/^static void start_daemon(void)$/;"	f	file:
start_daemon	examples/server.c	/^static void start_daemon(void)$/;"	f	file:
start_processes	examples/server.c	/^static void start_processes(void)$/;"	f	file:
start_threads	examples/server.c	/^static void start_threads(void)$/;"	f	file:
state	common.h	/^  int state;                  \/* Thread's state *\/$/;"	m	struct:_st_thread
stk_bottom	common.h	/^  char *stk_bottom;           \/* Lowest address of stack's usable portion *\/$/;"	m	struct:_st_stack
stk_size	common.h	/^  int  stk_size;              \/* Size of usable portion of the stack *\/$/;"	m	struct:_st_stack
stk_top	common.h	/^  char *stk_top;              \/* Highest address of stack's usable portion *\/$/;"	m	struct:_st_stack
stx_cache_create	extensions/lrucache.c	/^stx_cache_t *stx_cache_create(size_t max_size, size_t max_weight,$/;"	f
stx_cache_empty	extensions/lrucache.c	/^void stx_cache_empty(stx_cache_t *cache)$/;"	f
stx_cache_entry_create	extensions/lrucache.c	/^stx_cache_entry_t *stx_cache_entry_create(void *key, void *data,$/;"	f
stx_cache_entry_delete	extensions/lrucache.c	/^void stx_cache_entry_delete(stx_cache_t *cache, stx_cache_entry_t *entry)$/;"	f
stx_cache_entry_getdata	extensions/lrucache.c	/^void *stx_cache_entry_getdata(stx_cache_entry_t *entry)$/;"	f
stx_cache_entry_getkey	extensions/lrucache.c	/^void *stx_cache_entry_getkey(stx_cache_entry_t *entry)$/;"	f
stx_cache_entry_getlru	extensions/lrucache.c	/^stx_cache_entry_t *stx_cache_entry_getlru(stx_cache_t *cache)$/;"	f
stx_cache_entry_getweight	extensions/lrucache.c	/^size_t stx_cache_entry_getweight(stx_cache_entry_t *entry)$/;"	f
stx_cache_entry_insert	extensions/lrucache.c	/^int stx_cache_entry_insert(stx_cache_t *cache, stx_cache_entry_t *entry)$/;"	f
stx_cache_entry_lookup	extensions/lrucache.c	/^stx_cache_entry_t *stx_cache_entry_lookup(stx_cache_t *cache, const void *key)$/;"	f
stx_cache_entry_release	extensions/lrucache.c	/^void stx_cache_entry_release(stx_cache_t *cache, stx_cache_entry_t *entry)$/;"	f
stx_cache_entry_sizeof	extensions/lrucache.c	/^int stx_cache_entry_sizeof(void)$/;"	f
stx_cache_entry_t	extensions/stx.h	/^typedef struct _stx_centry stx_cache_entry_t;$/;"	t	typeref:struct:_stx_centry
stx_cache_getinfo	extensions/lrucache.c	/^void stx_cache_getinfo(stx_cache_t *cache, stx_cache_info_t *info)$/;"	f
stx_cache_getsize	extensions/lrucache.c	/^size_t stx_cache_getsize(stx_cache_t *cache)$/;"	f
stx_cache_getweight	extensions/lrucache.c	/^size_t stx_cache_getweight(stx_cache_t *cache)$/;"	f
stx_cache_info_t	extensions/stx.h	/^} stx_cache_info_t;$/;"	t	typeref:struct:_stx_cache_info
stx_cache_t	extensions/stx.h	/^typedef struct _stx_cache  stx_cache_t;$/;"	t	typeref:struct:_stx_cache
stx_cache_traverse	extensions/lrucache.c	/^void stx_cache_traverse(stx_cache_t *cache,$/;"	f
stx_cache_traverse_lru	extensions/lrucache.c	/^void stx_cache_traverse_lru(stx_cache_t *cache,$/;"	f
stx_cache_traverse_mru	extensions/lrucache.c	/^void stx_cache_traverse_mru(stx_cache_t *cache,$/;"	f
stx_clist_t	extensions/common.h	/^} stx_clist_t;$/;"	t	typeref:struct:_stx_clist
stx_dns_cache_getinfo	extensions/dnscache.c	/^void stx_dns_cache_getinfo(stx_cache_info_t *info)$/;"	f
stx_dns_cache_init	extensions/dnscache.c	/^int stx_dns_cache_init(size_t max_size, size_t max_bytes, size_t hash_size)$/;"	f
stx_dns_data_t	extensions/dnscache.c	/^} stx_dns_data_t;$/;"	t	typeref:struct:_stx_dns_data	file:
stx_dns_getaddr	extensions/dnscache.c	/^int stx_dns_getaddr(const char *hostname, struct in_addr *addr,$/;"	f
stx_dns_getaddrlist	extensions/dnscache.c	/^int stx_dns_getaddrlist(const char *hostname, struct in_addr *addrs,$/;"	f
stx_file_read	extensions/stx_fileio.c	/^stx_file_read(st_netfd_t fd, off_t offset, void *buf, size_t nbytes, st_utime_t timeout)$/;"	f
sync	docs/reference.html	/^<A NAME="sync">$/;"	a
table	extensions/lrucache.c	/^  stx_cache_entry_t **table;     \/* hash table for this cache *\/$/;"	m	struct:_stx_cache	file:
term	common.h	/^  _st_cond_t *term;           \/* Termination condition variable for join *\/$/;"	m	struct:_st_thread
thread	common.h	/^  _st_thread_t  *thread;      \/* Polling thread *\/$/;"	m	struct:_st_pollq
thread_create	docs/reference.html	/^<A NAME="thread_create">$/;"	a
thread_exit	docs/reference.html	/^<A NAME="thread_exit">$/;"	a
thread_getspecific	docs/reference.html	/^<A NAME="thread_getspecific">$/;"	a
thread_interrupt	docs/reference.html	/^<A NAME="thread_interrupt">$/;"	a
thread_join	docs/reference.html	/^<A NAME="thread_join">$/;"	a
thread_q	common.h	/^  _st_clist_t thread_q;       \/* all threads of this vp *\/$/;"	m	struct:_st_vp
thread_self	docs/reference.html	/^<A NAME="thread_self">$/;"	a
thread_setspecific	docs/reference.html	/^<A NAME="thread_setspecific">$/;"	a
thread_t	docs/reference.html	/^<A NAME="thread_t">$/;"	a
threads	docs/reference.html	/^<A NAME="threads">$/;"	a
time	docs/reference.html	/^<A NAME="time">$/;"	a
timecache_set	docs/reference.html	/^<A NAME="timecache_set">$/;"	a
timeouts	docs/notes.html	/^<A NAME="timeouts">$/;"	a
timing	docs/reference.html	/^<A NAME="timing">$/;"	a
tlink	common.h	/^  _st_clist_t tlink;          \/* For putting on thread queue *\/$/;"	m	struct:_st_thread
types	docs/reference.html	/^<A NAME="types">$/;"	a
usage	examples/server.c	/^static void usage(const char *progname)$/;"	f	file:
username	examples/server.c	/^static char *username   = NULL;$/;"	v	file:
utime	docs/reference.html	/^<A NAME="utime">$/;"	a
utime_func	docs/reference.html	/^<A NAME="utime_func">$/;"	a
utime_t	docs/reference.html	/^<A NAME="utime_t">$/;"	a
vaddr	common.h	/^  char *vaddr;                \/* Base of stack's allocated memory *\/$/;"	m	struct:_st_stack
vaddr_size	common.h	/^  int  vaddr_size;            \/* Size of stack's allocated memory *\/$/;"	m	struct:_st_stack
vp_count	examples/server.c	/^static int vp_count = 0;        \/* Number of server processes (VPs)     *\/$/;"	v	file:
vp_pids	examples/server.c	/^static pid_t *vp_pids;          \/* Array of VP pids                     *\/$/;"	v	file:
wait_links	common.h	/^  _st_clist_t wait_links;     \/* For putting on mutex\/condvar wait queue *\/$/;"	m	struct:_st_thread
wait_q	common.h	/^  _st_clist_t  wait_q;        \/* Mutex wait queue *\/$/;"	m	struct:_st_mutex
wait_q	common.h	/^  _st_clist_t wait_q;	      \/* Condition variable wait queue *\/$/;"	m	struct:_st_cond
wait_threads	examples/server.c	/^  int wait_threads;             \/* Number of threads waiting to accept  *\/$/;"	m	struct:socket_info	file:
wdog_sighandler	examples/server.c	/^static void wdog_sighandler(int signo)$/;"	f	file:
weight	extensions/lrucache.c	/^  size_t             weight;         \/* "weight" of this entry *\/$/;"	m	struct:_stx_centry	file:
write	docs/reference.html	/^<A NAME="write">$/;"	a
write_resid	docs/reference.html	/^<A NAME="write_resid">$/;"	a
writev	docs/reference.html	/^<A NAME="writev">$/;"	a
zombie_q	common.h	/^  _st_clist_t zombie_q;       \/* zombie queue for this vp *\/$/;"	m	struct:_st_vp
